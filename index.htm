<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
 
	<title>Dérive génétique</title>
	
	<link rel="stylesheet" href="style.css" type="text/css" media="screen">
	
	

	<script type="text/javascript" src="js/raphael-min.js"></script>
	

	
	<script type="text/javascript">
		 // variables globales
		 
		var nb=100;
		var nbcoul=5;
		var ngen=0;
		
		//graphique
		var x0=40.5;
		var y0=260.5;
		var dx=320;
		var dy=220;
			
		
		var nl=Math.ceil(Math.sqrt(nb)); // nombre de lignes	
		var largeboite=200; // largeur d'une boite en pixels
		var distanceboites=110; // espace entre les 2 boites
		 
		var boule2 = new Array();
		var xboul2 = new Array();
		var yboul2 = new Array();
		var xboul3 = new Array();
		var yboul3 = new Array();
		var courbes = new Array();
		var ncol = new Array();
		ncol[0]=new Array();
		ncol[1]=new Array();
		ncol[2]=new Array();
		ncol[3]=new Array();
		ncol[4]=new Array();
		var boule3	= new Array();
		var coulboul2 = new Array();
		var coulboul3 = new Array();
		var couls = new Array();
		var axex,axey=null;
		

		var r=Math.floor(largeboite/nl/2); // calcul du rayon d'une boule
		var espacement=r*2+2;
		var margex=40+r;
		var margey=5+r;
		
		var mutation=0;
		var taux=0;
					
		couls[0]=0;
		couls[1]=0.2;
		couls[2]=0.4;
		couls[3]=0.6;
		couls[4]=0.8;
		
		var nli=0;
		var nco=0;
		for (i=0;i<=4;i++)
		{
		  ncol[i][0]=0;
		}

		var view1,view2,view3,view4=null;
		var paper1,paper2,paper3,paper1=null;
		var hauteur=300;
	
		function initialise ()
		{
			document.getElementById('reinit').disabled = true;
			document.getElementById('suivante').disabled = true;
			document.getElementById('tirer').disabled = false;
			
			document.getElementById('affiche_taux').style.display='none';			
			document.getElementById('boutons').style.display='none';
			document.getElementById('taux').style.display='none';
			
			view1 = document.getElementById('cadre1');
			paper1 = new Raphael(view1, 600, hauteur);
			view2 = document.getElementById('cadre2');
			paper2 = new Raphael(view2, 400, hauteur);
									
						
			paper1.rect (0,0,600,hauteur,5);
			paper2.rect (0,0,400,hauteur,5);
			
			texteg1 = paper1.text(150,40, "").attr({'font-size': 20});
			texteg2 = paper1.text(450,40, "").attr({'font-size': 20});
			
			

			
			
			console.log("initialisation terminée");
			
		}
		
		function demarre ()
		{
			console.log("démarrage");
			
			nbt=document.getElementById('text_nombre').value;
			if (isNaN(nbt))
			{
			  alert ('Veuillez saisir des valeurs numériques entières');
			  return;
			}
			nb=Math.floor(nbt);
			if ((nb>100)||(nb<9))
			{
			  alert ('Choisir un nombre de boules compris entre 9 et 100');
			  return;
			}
			
			tauxt=document.getElementById('text_taux').value;
			if (isNaN(tauxt)&&(mutation==1))
			{
			  alert ('Veuillez saisir des valeurs numériques entières');
			  return;
			}
			taux=Math.floor(tauxt);
			if ((taux>9999)||(taux<2))
			{
			  alert ('Choisir un taux de mutation compris entre 2 et 9999');
			  return;
			}

			if (mutation==1)
			{
				document.getElementById('affiche_taux').style.display='';
				document.getElementById('affiche_taux').innerHTML='<i>Taux de mutation : 1 chance sur '+taux+'</i>';
			}
			else
			{
				document.getElementById('affiche_taux').style.display='none';
			}
			
			
			nbct=document.getElementById('text_couleurs').value;
			if (isNaN(nbct))
			{
			  alert ('Veuillez saisir des valeurs numériques entières');
			  return;
			}
			nbcoul=Math.floor(nbct);
			if ((nbcoul>5)||(nbcoul<2))
			{
			  alert ('Choisir un nombre de couleurs compris entre 2 et 5');
			  return;
			}
			
			ngen=0;
			nl=Math.ceil(Math.sqrt(nb)); // nombre de lignes
			r=Math.floor(largeboite/nl/2); // calcul du rayon d'une boule
			espacement=r*2+2;
			margex=40+r;
			margey=5+r;			
			
			for (ligne = 0; ligne < nl; ligne++) 
			{ 
				for (colonne = 0; colonne < nl; colonne++) 
				{ 

				   i=ligne*nl+colonne;
				   if (i<nb)
				   {
					   
					   boule2[i]=paper1.circle(100,100, r);
					   boule2[i].attr({stroke:"none"});
					   boule2[i].hide();
					   boule3[i]=paper1.circle(100,100, r);
					   boule3[i].attr({stroke:"none"});
					   boule3[i].hide();
					   
				   }
				   
				} 
			
			}
			document.getElementById('reglages').style.display='none';		
			document.getElementById('boutons').style.display='';
			
			console.log("démarrage terminé");
			dessine();
		
		}
	
		function dessine()
		{
			console.log("fonction dessine debut");			

			for (ligne = 0; ligne < nl; ligne++) 
			{ 
				for (colonne = 0; colonne < nl; colonne++) 
				{ 

				   i=ligne*nl+colonne;
				   if (i<nb)
				   {
					   x=colonne*espacement; 
					   y=hauteur-ligne*espacement; 
					   x=x+margex;
					   y=y-margey;
					   
					   c=Math.floor(Math.random()*nbcoul);
					   
					   // comptage
					   ncol[c][0]++;
					
					   coulboul2[i]=c;
					   xboul2[i]=x;
					   yboul2[i]=y;
					   
					   boule2[i].attr({cx:x,cy:y});
					   
					   hue = couls[coulboul2[i]] || 0;
					   degrade= "r(0.5,.25)hsb(" + hue + ",1, 1)-hsb(" + hue + ", .5, .45)";

					   boule2[i].attr({fill:degrade});

					   
					   
					   //=paper1.ball(x,y, r, couls[c]);
					   boule2[i].show();
				   }
				   
				} 
			}
			for (i=0;i<5;i++)
			{
				ncol[i][1]=0;
			}
			if (ngen==0) {var textGen="initiale";} else {textGen="n+"+ngen;}
			texteg1.attr('text','Génération '+textGen);
			texteg2.attr('text','Génération n°'+(ngen*1+1));
			console.log("fonction dessine terminée");
		}

		function graphique()
		{
		  paper2.clear();
		  paper2.rect (0,0,400,hauteur,5);
		  
		  // graduations horizontales
		  for (i=0;i<=ngen;i++)
		  {
			x=x0+(dx/(ngen+1))*(i+1);
			x=Math.floor(x)+0.5;
			gradx = paper2.path("M "+x+" "+y0+" l 0 -5");  
		  }
			
		  // graduations verticales
		  for (i=0;i<=10;i++)
		  {
			y=y0-(dy/10)*i;
			y=Math.floor(y)+0.5;
			grady = paper2.path("M "+x0+" "+y+" l 5 0");  
		  }
			
		  //courbe 0
		  
		  for (c=0;c<5;c++)
		  {
			  courbe="";
			  for (i=0;i<=(ngen+1);i++)
			  {
				x=x0+(dx/(ngen+1))*i;
				x=Math.floor(x)+0.5;
				y=y0-ncol[c][i]*dy/nb;
				
				y=Math.floor(y)+0.5;
				if (i==0)
				{
				  courbe=courbe+' M ';
				}
				else
				{
				  courbe=courbe+' L ';
				}
				courbe = courbe+x+' '+y;  
				
			  }	
			  //console.log(courbe);		  
			  courbes[c] = paper2.path(courbe);
			  hue = couls[c] ;
			  
			  courbes[c].attr ("stroke","hsb("+ hue+",0.75,0.75)");		 
			}	
		  
		  // axes
		  axex = paper2.path("M "+x0+" "+y0+" l "+(dx+20)+" 0 l -5 -5 m 0 10 l 5 -5");  
		  axey = paper2.path("M "+x0+" "+y0+" l 0 "+(-dy-20)+" l -5 5 m 10 0 l -5 -5");  
		  textex = paper2.text(x0+dx,y0+10, "Générations");
		  textey = paper2.text(x0+20,y0-dy-30, "Fréquence des couleurs");
		  
			console.log('graphiques tracés');		  
		}
		
		
		function tire_boule()
		{
			document.getElementById('reinit').disabled = false;
			j=nli*nl+nco;
			//console.log("j="+j);
						
			if (j<nb)
			{
								
				itiree=Math.floor(Math.random()*nb);
				//console.log("i tirée="+itiree);				

				x=nco*espacement; 
				y=hauteur-nli*espacement; 
				x=x+margex;
				y=y-margey;
				ciblex=largeboite+distanceboites+x;
				cibley=y;
				
				if ((ngen%2)==0)
				{
					coulboul3[j]=coulboul2[itiree];
					// mutation ?
					if (mutation==1)
					{
					  tiragemut=Math.random()*taux;
					  if (tiragemut>(taux-1))
					  {
						coulboul3[j]=Math.floor(Math.random()*5);
					  }
					}
					// comptage
					ncol[coulboul3[j]][ngen+1]++;
					xboul3[j]=x;
					yboul3[j]=y;
					
					
					boule3[j].attr({cx:xboul2[itiree],cy:yboul2[itiree]});
					hue = couls[coulboul3[j]] || 0;
					degrade= "r(0.5,.25)hsb(" + hue + ",1, 1)-hsb(" + hue + ", .5, .45)";

					boule3[j].attr({fill:degrade});
					
					boule3[j].show();
					
					boule3[j].animate({cx:ciblex,cy:cibley},2000,'bounce');	
				}
				else
				{
					coulboul2[j]=coulboul3[itiree];
					// mutation ?
					if (mutation==1)
					{
					  tiragemut=Math.random()*taux;
					  if (tiragemut>(taux-1))
					  {
						coulboul2[j]=Math.floor(Math.random()*5);
					  }
					}
					// comptage
					ncol[coulboul2[j]][ngen+1]++;
					
					xboul2[j]=x;
					yboul2[j]=y;
					
					boule2[j].attr({cx:xboul3[itiree],cy:yboul3[itiree]});
					hue = couls[coulboul2[j]] || 0;
					
					degrade= "r(0.5,.25)hsb(" + hue + ",1, 1)-hsb(" + hue + ", .5, .45)";

					boule2[j].attr({fill:degrade});
					
					boule2[j].show();	
					boule2[j].animate({cx:ciblex,cy:cibley},2000,'bounce');	
				}
				

				
				nco++;
				if (nco>(nl-1))
				{
					nco=0;
					nli++;
				}
				
				
			}
			else
			{
				graphique();
				document.getElementById('tirer').disabled = true;
				document.getElementById('touttirer').disabled = true;
				document.getElementById('suivante').disabled = false;
			}
			
			
		}
		
		function tire_tout()
		{
			for (ii=0;ii<=nb;ii++)
			{
			  tire_boule();
			}
			document.getElementById('touttirer').disabled = true;
		}
		
		function suivante()
		{
			nli=0;
			nco=0;
			
			// on efface les vieux
			for (i=0;i<nb;i++)
			{
				// on calcule le reste de la division dgen sur 2 : pair = 0
				if ((ngen%2)==0)
				{
					boule2[i].hide();
				}
				else
				{
					boule3[i].hide();
				}
			}
			for (ligne = 0; ligne < nl; ligne++) 
			{ 
				for (colonne = 0; colonne < nl; colonne++) 
				{ 

				   i=ligne*nl+colonne;
				   if (i<nb)
				   {
					   x=colonne*espacement; 
					   y=hauteur-ligne*espacement; 
					   ciblex=x+margex;
					   cibley=y-margey;
					   
					   t=(Math.random()*500)+500;
					   // génération paire ou impaire ?
					   if ((ngen%2)==0)
					   {
							boule3[i].stop();
							boule3[i].animate({cx:ciblex,cy:cibley},t,'bounce');
						}
						else
						{
							boule2[i].stop();
							boule2[i].animate({cx:ciblex,cy:cibley},t,'bounce');
						}
				   }
				   
				} 
			}
			ngen++;
			for (i=0;i<5;i++)
			{
				ncol[i][ngen+1]=0;
			}
			console.log("génération "+ngen);
			texteg1.attr('text','Génération n°'+ngen);
			texteg2.attr('text','Génération n°'+(ngen*1+1));
			document.getElementById('suivante').disabled = true;
			document.getElementById('tirer').disabled = false;
			document.getElementById('touttirer').disabled = false;
			
		}
		

		function reinitialiser()
		{
			for (i=0;i<nb;i++)
			{
					boule2[i].stop();
					boule3[i].stop();
					boule2[i].hide();
					boule3[i].hide();
			
			}
			nli=0;
			nco=0;
			
			for (i=0;i<5;i++)
			{
				ncol[i][0]=0;
			}
			
			document.getElementById('reinit').disabled = true;
			document.getElementById('suivante').disabled = true;
			document.getElementById('tirer').disabled = false;
			document.getElementById('touttirer').disabled = false;
			ngen=0;
			
			dessine();
			
		}
		
		function checktaux(cb)
		{
		  if (cb.checked == 1)
		  {
			document.getElementById('taux').style.display='';
		    mutation=1;
		  }
		  else
		  {
			document.getElementById('taux').style.display='none';
			mutation=0;
		  }
		}	
		
	</script>
	
</head>
<body onLoad="initialise();">

<div id="corps">
<h1 align=center>
	Modélisation de la dérive génétique<br>par tirages successifs avec remise
</h1>


<div id="cadre1" class="cadre1"></div>
<div id="cadre2" class="cadre2"></div>

<div id="affiche_taux">
  Taux de mutation : 1 chance sur 1000
</div>
<br>

<div id="reglages">
  <label>Nombre de boules (9-100) :
  <input type="text" id="text_nombre"  size="3" maxlength="3" value="16"/>
   </label>
  <br>
  <label>Nombre de couleurs (2-5) :
  <input type="text" id="text_couleurs"  size="1" maxlength="1" value="4"/>
  </label><br>
  
  <label><input type="checkbox" id="check_mut" value="autoriser" onchange="checktaux(this)" />Autoriser les mutations</label><br>
	<div id="taux">
	<label>Taux de mutations : 1 chance sur 
	<input type="text" id="text_taux"  size="4" maxlength="4" value="200"/>
	</label>
	</div>
  <br>
	<input id="demarre" class="button3" type="button" value="Démarrer" onclick="demarre()">
</div>



<div id="boutons" class="unselectable">
	<input id="tirer" class="button3" type="button" value="Tirer une boule" onclick="tire_boule()">
	<input id="touttirer" class="button3" type="button" value="Tout tirer" onclick="tire_tout()">
	
	<input id="suivante" class="button3" type="button" value="Génération suivante" onclick="suivante()">
	<input id="reinit"  class="button3" type="button" value="Recommencer" onclick="reinitialiser()">
	<input id="recharge" class="button3" type="button" value="Réinitialiser" onclick=" location.reload() ; ">
	
</div>
<p align=right><i>
Version HTML5/JS(Raphaël), Auteur : Philippe Cosentino
</i></p>
</div>

</body>
</html